Dynamic components are components created at runtime 
such as an alert overlay 

The NgComponentOutlet directive can be used to instantiate components and insert them into the current view. This directive allows you to provide a component class that should be rendered, as well as component inputs to be used during initialization.

@Component({
  selector: 'app-ad-banner',
  standalone: true,
  imports: [NgComponentOutlet, AsyncPipe],
  template: `
    <div class="ad-banner-example">
      <h3>Advertisements</h3>
      <ng-container *ngComponentOutlet="
        currentAd.component;
        inputs: currentAd.inputs;
      " />
      <button (click)="displayNextAd()">Next</button>
    </div>
  `
})
export class AdBannerComponent {
  private adList = inject(AdService).getAds();

  private currentAdIndex = 0;

  get currentAd() {
    return this.adList[this.currentAdIndex];
  }

  displayNextAd() {
    this.currentAdIndex++;
    // Reset the current ad index back to `0` when we reach the end of an array.
    if (this.currentAdIndex === this.adList.length) {
      this.currentAdIndex = 0;
    }
  }
}

The AdBannerComponent class injects the AdService service and requests a list of ads. The "current ad" index is set to 0 initially to indicate that the first ad should be displayed. When a user clicks the "Next" button, the index is increased by one. Once the index reaches the length of the ads array, the index is reset back to 0.

In the template, the currentAd getter is used to retrieve a current ad. If the value changes, Angular picks it up and reflects the changes in the UI.

The final ad banner can be seen from this link : https://angular.io/guide/dynamic-component-loader
